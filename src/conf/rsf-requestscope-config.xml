<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" 
	"http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
  <!-- This file contains request scope beans which are specific to RSF -->
   
  <!-- A request scope bean locator locating beans from THIS container! -->
  <bean id="requestbeanlocator" factory-bean="rsacbeanlocator"
    factory-method="getBeanLocator">
  </bean>
  
  <bean id="httpservletfactory" class="uk.org.ponder.rsac.servlet.HttpServletFactory">
  </bean>
   
  <bean id="httpservletrequest" factory-bean="httpservletfactory"
    factory-method="getHttpServletRequest"/>
  
  <bean id="httpservletresponse" factory-bean="httpservletfactory"
    factory-method="getHttpServletResponse"/>
  
  <bean id="earlyrequestparser" class="uk.org.ponder.rsf.servlet.EarlyRequestParser">
    <property name="httpServletRequest">
      <ref bean="httpservletrequest"/>
    </property>
  </bean>
  
  <bean id="requestmap" factory-bean="earlyrequestparser"
    factory-method="getRequestMap"/>
  
  <bean id="requestpathinfo" factory-bean="earlyrequestparser"
    factory-method="getPathInfo"/>
  
  <bean id="requesttype" factory-bean="earlyrequestparser"
    factory-method="getRequestType"/>
  
  <bean id="roothandlerbean" class="uk.org.ponder.rsf.servlet.RootHandlerBean"
    init-method="init">
    <property name="httpServletRequest">
      <ref bean="httpservletrequest"/>
    </property>
    <property name="httpServletResponse">
      <ref bean="httpservletresponse"/>
    </property>
    <property name="requestType">
      <ref local="requesttype"/>
    </property>
    <property name="requestBeanLocator">
      <ref local="requestbeanlocator"/>
    </property>
  </bean>
  
  <!-- The "censored" bean locator for which it is safe to resolve EL
  expressions coming in over the request -->
  <bean id="rsacsafebeanlocator"
    class="uk.org.ponder.beanutil.BeanContainerWrapper">
    <property name="beanLocator">
      <ref local="requestbeanlocator"/>
    </property>
    <property name="permittedBeanRoots">
      <ref bean="requestwriteablebeans"/>
    </property>
  </bean>
  
  <bean id="viewparameters"
    class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="targetObject">
      <ref bean="viewparametersparser"/>
    </property>
    <property name="targetMethod">
      <value>parse</value>
    </property>
    <property name="arguments">
      <list>
        <ref local="requestpathinfo"/>
        <ref local="requestmap"/>
      </list>
    </property>
  </bean>
    
  <bean id="postdecoder" class="uk.org.ponder.rsf.processor.PostDecoder">
    <property name="renderSystemStatic">
      <ref bean="rendersystemstatic"/>
    </property>
    <property name="requestMap">
      <ref bean="requestmap"/>
    </property>
    <property name="requestType">
      <ref bean="requesttype"/>
    </property>
    <property name="fossilizedConverter">
      <ref bean="fossilizedconverter"/>
    </property>
  </bean>
  
  <bean id="normalizedrequest" factory-bean="postdecoder"
    factory-method="getNormalizedRequest"/>
  
  <bean id="requestrsvc" factory-bean="postdecoder"
    factory-method="getRequestRSVC"/>
  
  <bean id="versioncheckpolicy"
    class="uk.org.ponder.rsf.state.NullVersionCheckPolicy"/>
  
  <bean id="rsvcapplier" class="uk.org.ponder.rsf.state.RSVCApplier">
    <property name="versionCheckPolicy">
      <ref bean="versioncheckpolicy"/>
    </property>
    <property name="rootBeanLocator">
      <ref bean="rsacsafebeanlocator"/>
    </property>
    <property name="beanModelAlterer">
      <ref bean="darapplier"/>
    </property>
  </bean>
  
  <bean id="defaultpreserver"
    class="uk.org.ponder.rsf.state.RSVCPreservationStrategy">
    <property name="requestRSVC">
      <ref local="requestrsvc"/>
    </property>
    <property name="preservingBeans">
      <ref bean="requestwriteablebeans"/>
    </property>
    <property name="tokenStateHolder">
      <ref bean="flowtokenstateholder"/>
    </property>
    <property name="RSVCApplier">
      <ref bean="rsvcapplier"/>
    </property>
  </bean>
  
  <bean id="errorstatemanager" class="uk.org.ponder.rsf.state.ErrorStateManager"
    init-method="init">
    <property name="TSHolder">
      <ref bean="errortokenstateholder"/>
    </property>
    <property name="viewParameters">
      <ref local="viewparameters"/>
    </property>
    <property name="requestRSVC">
      <ref local="requestrsvc"/>
    </property>
  </bean>
  
  <bean id="statepreservationstrategies" class="java.util.ArrayList">
    <constructor-arg>
      <list>
        <ref bean="defaultpreserver"/>
      </list>
    </constructor-arg>
  </bean>
  
  <bean id="statepreservationmanager"
    class="uk.org.ponder.rsf.state.StatePreservationManager">
    <property name="strategies">
      <ref bean="statepreservationstrategies"/>
    </property>
    <property name="writeableBeanLocator">
      <ref local="rsacsafebeanlocator"/>
    </property>
  </bean>
  
  <bean id="autobaseurlprovider" class="uk.org.ponder.rsf.servlet.AutoBaseURLProvider"
    init-method="init">
    <property name="httpServletRequest">
      <ref bean="httpservletrequest"/>
    </property>
  </bean>
  
  <!-- The default viewstatehandler uses the autobaseurlprovider to infer
  URLS. Clients may override it by referring to a static one of their
  choosing. It is easier to ask them to override this whole bean than it is
  to implement support for Spring bean aliases in RSAC :P -->
  <bean id="viewstatehandler"
    class="uk.org.ponder.rsf.viewstate.RSFServletViewStateHandler">
    <property name="baseURLProvider">
      <ref bean="autobaseurlprovider"/>
    </property>
  </bean>
  
  <bean id="urlrewriter" class="uk.org.ponder.rsf.viewstate.URLRewriter">
    <property name="viewStateHandler">
      <ref bean="viewstatehandler"/>
    </property>
  </bean>
  
  <bean id="urlrewritescr" class="uk.org.ponder.rsf.renderer.html.URLRewriteSCR">
    <property name="URLRewriter">
      <ref bean="urlrewriter"/>
    </property>
    <property name="viewTemplate">
      <ref bean="viewtemplate"/>
    </property>
  </bean>
  
  <!-- A collection of static renderers that is expected to be dynamically
  writeable - filters and the like might populate it before request handling
  with consumer-specific rewriters. -->
  <bean id="consumerstaticrenderers"
    class="uk.org.ponder.rsf.renderer.StaticRendererCollection">
  </bean>
  
  <!-- A set of static renderers to be used for this request -->
  <bean id="staticrenderers"
    class="uk.org.ponder.rsf.renderer.StaticRendererCollection">
    <property name="staticRenderers">
      <list>
        <ref local="urlrewritescr"/>
        <ref local="consumerstaticrenderers"/>
      </list>
    </property>
  </bean>
  
  <bean id="rendersystem"
    class="uk.org.ponder.rsf.renderer.html.BasicHTMLRenderSystem">
    <property name="staticRenderers">
      <ref local="staticrenderers"/>
    </property>
  </bean>
  
  <!-- Given a TemplateResolver and a ViewParameters object, the Template
  LoaderBean returns a template. This is a factory bean -->
  <!-- Get rid of this and turn the TemplateResolver itself into a 
  request-scope bean -->
  <bean id="viewtemplate"
    class="uk.org.ponder.rsf.templateresolver.TemplateLoaderBean">
    <!-- EXTERNAL DEPENDENCY! The application supplies the template resolver -->
    <property name="templateResolver">
      <ref bean="viewtemplateresolver"/>
    </property>
    <property name="viewParameters">
      <ref local="viewparameters"/>
    </property>
  </bean>
  
  <bean id="viewrender" class="uk.org.ponder.rsf.renderer.ViewRender">
    <property name="viewTemplate">
      <ref local="viewtemplate"/>
    </property>
    <!-- This dependence is injected manually, since the alterationwrapper must
      bracket restoration, and access to the model by fixup -->
    <!--
    <property name="view">
    <ref local="view"/>
    </property>-->
    <property name="renderSystem">
      <ref local="rendersystem"/>
    </property>
  </bean>
  
  <!-- The default alteration wrapper performs no ORM-specific bracketing
  of alteration operations -->
  <bean id="alterationwrapper" class="uk.org.ponder.util.NullRunnableWrapper">
  </bean>
  
  <bean id="posthandler" class="uk.org.ponder.rsf.processor.PostHandler">
    <property name="errorStateManager">
      <ref local="errorstatemanager"/>
    </property>
    <property name="actionResultInterpreter">
      <ref bean="actionresultinterpreter"/>
    </property>
    <property name="viewParameters">
      <ref local="viewparameters"/>
    </property>
    <property name="requestRSVC">
      <ref local="requestrsvc"/>
    </property>
    <property name="alterationWrapper">
      <ref bean="alterationwrapper"/>
    </property>
    <property name="RSVCApplier">
      <ref bean="rsvcapplier"/>
    </property>
    <property name="normalizedRequestMap">
      <ref local="normalizedrequest"/>
    </property>
    <property name="statePreservationManager">
      <ref local="statepreservationmanager"/>
    </property>
  </bean>
  
  <bean id="formmodel"
    class="uk.org.ponder.rsf.componentprocessor.BasicFormModel">
    
  </bean>
  
  <bean id="viewgenerator" class="uk.org.ponder.rsf.view.ViewGenerator">
    <!-- EXTERNAL DEPENDENCY! The application supplies the view collection -->
    <property name="viewCollection">
      <ref bean="viewcollection"/>
    </property>
    <property name="viewParameters">
      <ref local="viewparameters"/>
    </property>
    <property name="componentChecker">
      <ref local="viewtemplate"/>
    </property>
    <property name="formModel">
      <ref bean="formmodel"/>
    </property>
  </bean>
  
  <bean id="valuefixer" class="uk.org.ponder.rsf.processor.ValueFixer">
    <property name="requestRSVC">
      <ref local="requestrsvc"/>
    </property>
    <property name="beanLocator">
      <ref local="rsacsafebeanlocator"/>
    </property>
    <property name="modelAlterer">
      <ref bean="darapplier"/>
    </property>
    <property name="fossilizedConverter">
      <ref bean="fossilizedconverter"/>
    </property>
  </bean>
  
  <!-- Used when operating an HTML-like form system whereby submitting controls
  are defined by nesting within an element -->
  <bean id="containmentformfixer"
    class="uk.org.ponder.rsf.processor.ContainmentFormChildFixer">
  </bean>
  
  <bean id="formfixer" class="uk.org.ponder.rsf.processor.DefaultFormFixer">
    <property name="viewParameters">
      <ref local="viewparameters"/>
    </property>
    <property name="viewStateHandler">
      <ref bean="viewstatehandler"/>
    </property>
    <property name="viewGenerator">
      <ref bean="viewgenerator"/>
    </property>
    <property name="formModel">
      <ref bean="formmodel"/>
    </property>
  </bean>
  
  <bean id="viewparamsfixer" class="uk.org.ponder.rsf.processor.ViewParamsFixer">
    <property name="viewStateHandler">
      <ref bean="viewstatehandler"/>
    </property>
  </bean>
  
  <bean id="viewprocessor" class="uk.org.ponder.rsf.view.ViewProcessor">
    <property name="componentProcessors">
      <list>
          <!-- This must execute before formfixer-->
        <ref bean="containmentformfixer"/>
        <ref bean="formfixer"/>
        <ref bean="viewparamsfixer"/>
        <ref bean="messagefixer"/>
        <ref bean="valuefixer"/>
      </list>
    </property>
  </bean>
  
  <bean id="gethandler" class="uk.org.ponder.rsf.processor.GetHandler">
    <property name="errorStateManager">
      <ref local="errorstatemanager"/>
    </property>
    <property name="viewExceptionStrategy">
      <ref bean="viewexceptionstrategy"/>
    </property>
    <property name="viewParameters">
      <ref local="viewparameters"/>
    </property>
  </bean>
  
  <bean id="gethandlerimpl" class="uk.org.ponder.rsf.processor.GetHandlerImpl">
    <property name="errorStateManager">
      <ref local="errorstatemanager"/>
    </property>
    <property name="viewParameters">
      <ref local="viewparameters"/>
    </property>
    <property name="viewGenerator">
      <ref bean="viewgenerator"/>
    </property> 
    <property name="alterationWrapper">
      <ref bean="alterationwrapper"/>
    </property>
     <property name="statePreservationManager">
      <ref local="statepreservationmanager"/>
    </property>
    <property name="viewProcessor">
      <ref bean="viewprocessor"/>
    </property>
    <property name="viewRender">
      <ref bean="viewrender"/>
    </property>
  </bean>
</beans>