<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" 
	"http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
  <!-- This file contains request scope beans which are specific to RSF -->
   
  <!-- A request scope bean locator locating beans from THIS container! -->
  <bean id="requestbeanlocator" factory-bean="rsacBeanLocator"
    factory-method="getBeanLocator">
  </bean> 
  
  <bean id="deadRequestBeanLocator" factory-bean="rsacBeanLocator"
    factory-method="getDeadBeanLocator">
  </bean>
  
  <bean id="httpServletFactory" class="uk.org.ponder.rsac.servlet.HttpServletFactory">
  </bean>
   
  <bean id="httpServletRequest" factory-bean="httpServletFactory"
    factory-method="getHttpServletRequest"/>
  
  <bean id="httpServletResponse" factory-bean="httpServletFactory"
    factory-method="getHttpServletResponse"/>
  
  <bean id="earlyRequestParser" class="uk.org.ponder.rsf.servlet.EarlyRequestParser">
    <property name="httpServletRequest">
      <ref bean="httpServletRequest"/>
    </property>
  </bean>
  
  <bean id="requestMap" factory-bean="earlyRequestParser"
    factory-method="getRequestMap"/>
  
  <bean id="requestpathinfo" factory-bean="earlyRequestParser"
    factory-method="getPathInfo"/>
  
  <bean id="requestType" factory-bean="earlyRequestParser"
    factory-method="getRequestType"/>
  
  <bean id="handlerResolver" class="uk.org.ponder.rsf.processor.DefaultHandlerResolver">
    <property name="renderHandler">
      <ref bean="RSFRenderHandler"/>
    </property>
    <property name="actionHandler">
      <ref bean="RSFActionHandler"/>
    </property>
  </bean>
  
  <bean id="renderHandler" factory-bean="handlerResolver" factory-method="getRenderHandler"/>
  <bean id="actionHandler" factory-bean="handlerResolver" factory-method="getActionHandler"/>
  
  <!--  This bean can go away once we implement parent factories and bean references -->
  <bean id="handlerHook" class="uk.org.ponder.rsf.processor.NullHandlerHook">
  </bean>
  
  <bean id="rootHandlerBean" class="uk.org.ponder.rsf.servlet.RootHandlerBean"
    init-method="handle">
    <property name="httpServletRequest">
      <ref bean="httpServletRequest"/>
    </property>
    <property name="httpServletResponse">
      <ref bean="httpServletResponse"/>
    </property>
    <property name="requestType">
      <ref local="requestType"/>
    </property>
    <property name="viewStateHandler">
      <ref bean="viewStateHandler"/>
    </property>
    <property name="outgoingParams">
      <ref bean="outgoingParams"/>
    </property>
    <property name="renderHandlerBracketer">
      <ref bean="renderHandlerBracketer"/>
    </property>
    <property name="actionHandler">
      <ref bean="actionHandler"/>
    </property>
    <property name="handlerHook">
      <ref bean="handlerHook"/>
    </property>
  </bean>
  
  <!-- The "censored" bean locator into which it is safe to resolve EL
  expressions coming in over the request -->
  <bean id="rsacsafebeanlocator"
    class="uk.org.ponder.beanutil.BeanContainerWrapper">
    <property name="beanLocator">
      <ref local="requestbeanlocator"/>
    </property>
    <property name="permittedBeanRoots"> 
      <ref bean="requestAddressibleBeans"/>
    </property>
    <property name="fallbackBeans">
      <ref bean="fallbackBeans"/>
    </property>
  </bean>

  <bean id="viewParameters"
    class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="singleton">
      <value>true</value>
    </property>
    <property name="targetObject">
      <ref bean="viewParametersParser"/>
    </property>
    <property name="targetMethod">
      <value>parse</value>
    </property>
    <property name="arguments">
      <list>
        <ref local="requestpathinfo"/>
        <ref local="requestMap"/>
      </list>
    </property>
  </bean>
    
  <bean id="postdecoder" class="uk.org.ponder.rsf.processor.PostDecoder" init-method="init">
    <property name="renderSystemStatic">
      <ref bean="rendersystemstatic"/>
    </property>
    <property name="requestMap">
      <ref bean="requestMap"/>
    </property>
    <property name="requestType">
      <ref bean="requestType"/>
    </property>
    <property name="fossilizedConverter">
      <ref bean="fossilizedConverter"/>
    </property>
  </bean>
  
  <bean id="normalizedrequest" factory-bean="postdecoder"
    factory-method="getNormalizedRequest"/>
  
  <bean id="outgoingMap" class="java.util.HashMap"></bean>
  
  <bean id="requestrsvc" factory-bean="postdecoder"
    factory-method="getRequestRSVC"/>
  
  <bean id="versioncheckpolicy"
    class="uk.org.ponder.rsf.state.NullVersionCheckPolicy"/>
  
  <bean id="rsvcapplier" class="uk.org.ponder.rsf.state.RSVCApplier">
    <property name="versionCheckPolicy">
      <ref bean="versioncheckpolicy"/>
    </property>
    <property name="rootBeanLocator">
      <ref bean="rsacsafebeanlocator"/>
    </property>
    <property name="beanModelAlterer">
      <ref bean="DARApplier"/>
    </property>
  </bean>
 
  <bean id="errorstatemanager" class="uk.org.ponder.rsf.state.ErrorStateManager"
    init-method="init">
    <property name="TSHolder">
      <ref bean="bandgapStateHolder"/>
    </property>
    <property name="viewParameters">
      <ref local="viewParameters"/>
    </property>
    <property name="requestRSVC">
      <ref local="requestrsvc"/>
    </property>
  </bean> 
  
  <bean id="statePreservationManager"
    class="uk.org.ponder.rsf.preservation.StatePreservationManager">
    <property name="strategies">
      <ref bean="statePreservationStrategies"/>
    </property>
    <property name="startFlowStrategies">
      <ref bean="startFlowStatePreservationStrategies"/>
    </property>
    <property name="endFlowStrategies">
      <ref bean="endFlowStatePreservationStrategies"/>
    </property>
    <property name="writeableBeanLocator">
      <ref local="rsacsafebeanlocator"/>
    </property>
    <property name="deadBeanLocator">
      <ref local="deadRequestBeanLocator"/>
    </property>
  </bean>
  
  <bean id="autoBaseURLProvider" class="uk.org.ponder.rsf.servlet.AutoBaseURLProvider"
    init-method="init">
    <property name="httpServletRequest">
      <ref bean="httpServletRequest"/>
    </property>
  </bean>
  
  <bean name="outgoingParams" class="uk.org.ponder.rsf.components.ParameterList"></bean>
  
  <!-- The default viewstatehandler uses the baseURLProvider (defaulted to 
    autoBaseURLProvider in blank-config to infer URLs. Clients may override it 
    by referring to another of their choosing.  -->
  <bean id="viewStateHandler"
    class="uk.org.ponder.rsf.viewstate.RSFServletViewStateHandler">
    <property name="baseURLProvider">
      <ref bean="baseURLProvider"/>
    </property>
    <property name="consumerInfo">
      <ref bean="consumerInfo"/>
    </property>
    <property name="beanModelAlterer">
      <ref bean="DARApplier"/>
    </property>
  </bean>
  
  <bean id="urlrewriter" class="uk.org.ponder.rsf.viewstate.URLRewriter">
    <property name="viewStateHandler">
      <ref bean="viewStateHandler"/>
    </property>
  </bean>
  
  <bean id="urlrewritescr" class="uk.org.ponder.rsf.renderer.html.URLRewriteSCR">
    <property name="URLRewriter">
      <ref bean="urlrewriter"/>
    </property>
    <property name="viewTemplate">
      <ref bean="viewtemplate"/>
    </property>
  </bean>
  
  <!-- A set of static renderers to be used for this request -->
  <bean id="staticrenderers"
    class="uk.org.ponder.rsf.renderer.StaticRendererCollection">
    <property name="staticRenderers">
      <list>
        <ref local="urlrewritescr"/>
        <ref bean="consumerStaticRenderers"/>
      </list>
    </property>
  </bean>
  
  <bean id="rendersystem"
    class="uk.org.ponder.rsf.renderer.html.BasicHTMLRenderSystem">
    <property name="staticRenderers">
      <ref local="staticrenderers"/>
    </property>
  </bean>
  
  <!-- Given a TemplateResolver and a ViewParameters object, the Template
  LoaderBean returns a template. This is a factory bean -->
  <!-- Get rid of this and turn the TemplateResolver itself into a 
  request-scope bean -->
  <bean id="viewtemplate"
    class="uk.org.ponder.rsf.templateresolver.TemplateLoaderBean">
    <!-- EXTERNAL DEPENDENCY! The application supplies the template resolver -->
    <property name="templateResolver">
      <ref bean="viewtemplateresolver"/>
    </property>
    <property name="viewParameters">
      <ref local="viewParameters"/>
    </property>
  </bean>
  
  <bean id="viewrender" class="uk.org.ponder.rsf.renderer.ViewRender">
    <property name="viewTemplate">
      <ref local="viewtemplate"/>
    </property>
    <!-- This dependence is injected manually, since the alterationwrapper must
      bracket restoration, and access to the model by fixup -->
    <!--
    <property name="view">
    <ref local="view"/>
    </property>-->
    <property name="renderSystem">
      <ref local="rendersystem"/>
    </property>
    <property name="messageRenderer">
      <ref bean="messageRenderer"/>
    </property>
  </bean>
    
  <bean id="RSFActionHandler" class="uk.org.ponder.rsf.processor.RSFActionHandler"
  lazy-init="true">
    <property name="errorStateManager">
      <ref local="errorstatemanager"/>
    </property>
    <property name="ARIResolver">
      <ref bean="ARIResolver"/>
    </property>
    <property name="viewParameters">
      <ref local="viewParameters"/>
    </property>
    <property name="requestRSVC">
      <ref local="requestrsvc"/>
    </property>
    <property name="alterationWrapper">
      <ref bean="alterationWrapper"/>
    </property>
    <property name="RSVCApplier">
      <ref bean="rsvcapplier"/>
    </property>
    <property name="normalizedRequestMap">
      <ref local="normalizedrequest"/>
    </property>
    <property name="statePreservationManager">
      <ref local="statePreservationManager"/>
    </property>
    <property name="viewExceptionStrategy">
      <ref bean="viewExceptionStrategy"/>
    </property>
    <property name="actionErrorStrategy">
      <ref bean="actionErrorStrategyManager"/>
    </property>
  </bean>
  
  <bean id="ARIResult" factory-bean = "actionHandler" factory-method="getARIResult"
    lazy-init="true"/>
  
<!-- Begin beans for FlowLite -->  
   
  <bean id="flowLite-flowIDHolder" class="uk.org.ponder.rsf.flow.lite.FlowIDHolder"></bean>
  
  <bean id="flowLite-flowProxyBean"
    class="uk.org.ponder.rsf.flow.lite.FlowActionProxyBean" abstract="true">
    <property name="reflectiveCache" ref="reflectiveCache"/>
    <property name="beanLocator">
      <ref bean="requestbeanlocator"/>
    </property>
    <property name="viewParameters">
      <ref bean="viewParameters"/>
    </property>
    <property name="flowIDHolder">
      <ref bean="flowLite-flowIDHolder"/>
    </property>
    <property name="actionErrorStrategy">
      <ref bean="actionErrorStrategyManager"/>
    </property>
  </bean> 
  
  <bean id="flowLite-ARIResolver" class="uk.org.ponder.rsf.flow.lite.FlowLiteARIResolver">
    <property name="defaultARI"> 
      <ref bean="defaultARI"/> 
    </property>
    <property name="flowLiteARI">
      <ref bean="flowLiteARI"/>
    </property>
    <property name="flowIDHolder">
      <ref bean="flowLite-flowIDHolder"/>
    </property>
  </bean>
 
  <!-- End beans for FlowLite -->
 
  
  <bean id="viewgenerator" class="uk.org.ponder.rsf.view.ViewGenerator">
    <!-- EXTERNAL DEPENDENCY! The application supplies the view collection -->
    <property name="viewResolver">
      <ref bean="viewResolver"/>
    </property>
    <property name="viewParameters">
      <ref local="viewParameters"/>
    </property>
    <property name="componentChecker">
      <ref local="viewtemplate"/>
    </property>
  </bean>
  <!--
  <bean id="view" factory-bean="viewgenerator" factory-method="getView"/>
  -->
  
  <!-- Begin "fixer" beans - manipulate component tree in between generation
    and rendering -->
  
  
  <!-- Used when operating an HTML-like form system whereby submitting controls
  are defined by nesting within an element -->
  <bean id="containmentformfixer"
    class="uk.org.ponder.rsf.componentprocessor.ContainmentFormChildFixer">
  </bean>
  
  <bean id="formfixer" class="uk.org.ponder.rsf.componentprocessor.DefaultFormFixer">
    <property name="viewParameters">
      <ref local="viewParameters"/>
    </property>
    <property name="viewStateHandler">
      <ref bean="viewStateHandler"/>
    </property>
    <!--
    <property name="view">
      <ref bean="view"/>
    </property>-->
    <property name="outgoingParams">
      <ref bean="outgoingParams"/>
    </property>
  </bean>
  
  <bean id="valuefixer" class="uk.org.ponder.rsf.componentprocessor.ValueFixer">
    <property name="requestRSVC">
      <ref local="requestrsvc"/>
    </property>
    <property name="beanLocator">
      <ref local="rsacsafebeanlocator"/>
    </property>
    <property name="modelAlterer">
      <ref bean="DARApplier"/>
    </property>
    <property name="fossilizedConverter">
      <ref bean="fossilizedConverter"/>
    </property>
  </bean>
  
  <bean id="viewparamsfixer" class="uk.org.ponder.rsf.componentprocessor.ViewParamsFixer">
    <property name="viewStateHandler">
      <ref bean="viewStateHandler"/>
    </property>
  </bean>
  
  <!-- End "fixer" beans" -->
  
  <bean id="viewprocessor" class="uk.org.ponder.rsf.view.ViewProcessor">
    <property name="componentProcessors">
      <list>
          <!-- This must execute before formfixer-->
        <ref bean="containmentformfixer"/>
        <ref bean="formfixer"/>  
        <ref bean="viewparamsfixer"/>
        <ref bean="messagefixer"/>
        <ref bean="bindingfixer"/>
        <ref bean="valuefixer"/>
      </list>
    </property>
  </bean>
  
  <bean id="renderHandlerBracketer" class="uk.org.ponder.rsf.processor.RenderHandlerBracketer" 
    lazy-init="true">
    <property name="errorStateManager">
      <ref local="errorstatemanager"/>
    </property>
    <property name="viewExceptionStrategy">
      <ref bean="viewExceptionStrategy"/>
    </property>
    <property name="viewParameters">
      <ref local="viewParameters"/>
    </property>
    <property name="renderHandler">
      <ref bean="renderHandler"/>
    </property>
  </bean>
  
  <!-- achieve two things here with laziness - renderHandler is not resolved in non-POST requests,
    and ALSO is not resolved until first use, to allow exception bracketing -->
  <bean id="RSFRenderHandler" class="uk.org.ponder.rsf.processor.RSFRenderHandler"
  lazy-init="true">
    <property name="errorStateManager">
      <ref local="errorstatemanager"/>
    </property>
    <property name="viewParameters">
      <ref local="viewParameters"/>
    </property>
    <property name="viewGenerator">
      <ref bean="viewgenerator"/>
    </property> 
    <property name="alterationWrapper">
      <ref bean="alterationWrapper"/>
    </property>
     <property name="statePreservationManager">
      <ref local="statePreservationManager"/>
    </property>
    <property name="viewProcessor">
      <ref bean="viewprocessor"/>
    </property>
    <property name="viewRender">
      <ref bean="viewrender"/>
    </property>
  </bean>
</beans>